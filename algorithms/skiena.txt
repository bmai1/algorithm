Requisites for designing correct, efficient, implementable algorithms:
- techniques; ds, dp, dfs, backtracking
    - modeling, abstracting real-world application into problem
- resources; recognition, existing implementations as a starting point

1.7 Exercises (39)
1-1. a + b < min(a,b) when a and b are both negative
1-2. a x b < min(a,b) when one is positive and greater than 1, one is negative

Chapter 8 - Dynamic programming (285)

- Allows for optimization by storing results to avoid recomputing
- Trick lies in seeing if naive recursive algo computes same subproblems
- Start off with correct recursive solution
- Tradeoff of space for time